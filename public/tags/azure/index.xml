<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure on Ghassan&#39;s page</title>
    <link>http://localhost:1313/tags/azure/</link>
    <description>Recent content in Azure on Ghassan&#39;s page</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Dec 2024 18:41:54 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/azure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure Artifacts Credential Provider</title>
      <link>http://localhost:1313/post/2024_12_27_azure_artifact_cerdential_provider/</link>
      <pubDate>Tue, 17 Dec 2024 18:41:54 -0600</pubDate>
      <guid>http://localhost:1313/post/2024_12_27_azure_artifact_cerdential_provider/</guid>
      <description>&lt;p&gt;When you store your artifacts (NuGet, NPM, Docker&amp;hellip;) inside your private Azure Artifacts, you need to use credentials to pull those artifacts.&lt;br&gt;&#xA;You can require getting those artifacts from different tools that do your build: dotnet, nuget, msbuild, visual studio&amp;hellip;.&lt;br&gt;&#xA;In order to automate the aquisition of credentials needed from all these different tools, Microsoft provides a unified tool to automate aquisition those credentials: **Azure Artifacts Credential Provider&amp;quot;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;introduction--underlying-technology&#34;&gt;Introduction &amp;amp; Underlying Technology.&lt;/h1&gt;&#xA;&lt;p&gt;Because artifacts are required when you need NuGet packages, and you need to preform NuGet operation, which will require you to authenticate, so the &lt;strong&gt;Credential Provider&lt;/strong&gt; is a NuGet plugin used by NuGet client.&lt;br&gt;&#xA;The NuGet client can be either:&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Journey into Microsoft Identity Platform</title>
      <link>http://localhost:1313/post/2024_08_19_microsoft_identity_platform/</link>
      <pubDate>Mon, 19 Aug 2024 10:41:54 -0600</pubDate>
      <guid>http://localhost:1313/post/2024_08_19_microsoft_identity_platform/</guid>
      <description>&lt;p&gt;It is not exaggeration if I said, Microsoft Identity Platform is bigger than any SAS authentication provider, and if you are using Azure as your cloud provider, then the authorization benefits that will add to your application off-the-shelf, won&amp;rsquo;t be able to do it with any other platform without writing code.&lt;/p&gt;&#xA;&lt;h1 id=&#34;usage-with-net&#34;&gt;Usage with .NET&lt;/h1&gt;&#xA;&lt;p&gt;.NET has a library, which is considered part of the platform. It is &lt;code&gt;Microsfot.Identity.Web&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;how-to-use-it&#34;&gt;How to use it?&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; Microsoft.Identity.Web;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; Microsoft.Identity.Web.UI;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; Microsoft.IdentityModel.Tokens;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; builder = WebApplication.CreateBuilder(args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Add services to the container.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .AddMicrosoftIdentityWebApp(builder.Configuration.GetSection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;AzureAd&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.AddControllersWithViews(options =&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; policy = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; AuthorizationPolicyBuilder()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .RequireAuthenticatedUser()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .Build();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    options.Filters.Add(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; AuthorizeFilter(policy));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.AddRazorPages()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .AddMicrosoftIdentityUI();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; app = builder.Build();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;explaining-the-code&#34;&gt;Explaining the code&lt;/h3&gt;&#xA;&lt;p&gt;The library &lt;code&gt;Microsoft.Idenity.Web&lt;/code&gt; provides lots of workflow behind the scene, and it is the latest.&#xA;More about the library later.&#xA;What the code will do for your application:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Azure Managed Identity to skip sharing credentials</title>
      <link>http://localhost:1313/post/2024_01_14_managedidentity/</link>
      <pubDate>Sun, 14 Jan 2024 10:41:54 -0600</pubDate>
      <guid>http://localhost:1313/post/2024_01_14_managedidentity/</guid>
      <description>&lt;p&gt;A common challenge for developers is the management of secrets and credentials used to secure communication between different components making up a solution. Managed identities eliminate the need for developers to manage credentials.&lt;br&gt;&#xA;While developers can securely store the secrets in Azure Key Vault, services need a way to access Azure Key Vault. Managed identities provide an automatically managed identity in Microsoft Entra ID for applications to use when connecting to Azure resources. Applications can use managed identities to obtain Microsoft Entra tokens without having to manage any credentials.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Single Page Application call a secure your API with OAuth2</title>
      <link>http://localhost:1313/post/2024_01_05_oauth2_and_spa/</link>
      <pubDate>Fri, 05 Jan 2024 12:41:54 -0600</pubDate>
      <guid>http://localhost:1313/post/2024_01_05_oauth2_and_spa/</guid>
      <description>&lt;p&gt;When a public SPA needs to authenticate through OAuth 2.0, it faces a big challenge.&lt;br&gt;&#xA;The challenge is you cannot store any type of secrets of credentials in your code. This is why OAuth provided a special flow to be used by SPA: Authorization Code Grant &amp;amp; PKCE. We are going to describe this flow in details here.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary-of-the-process&#34;&gt;Summary of the process:&lt;/h2&gt;&#xA;&lt;p&gt;To describe the flow briefly, when the SPA requires to get a token it will direct the application to an Authorization Server (AS), which will use that server login page and UI, and the user will run the login process on the AS server website, then that server will return back to the original client website using a callback url passing the token to the SPA.&lt;br&gt;&#xA;So the client SPA has no idea about the credentials and the client cannot intercept those credentials because the login run on Authorization Server website.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Different options to add SSL certificate to you Azure App Service</title>
      <link>http://localhost:1313/post/2023_12_8_azureappservice_ssl_certificate/</link>
      <pubDate>Fri, 08 Dec 2023 12:41:54 -0600</pubDate>
      <guid>http://localhost:1313/post/2023_12_8_azureappservice_ssl_certificate/</guid>
      <description>&lt;p&gt;To add a SSL certificate to your web app hosted on Azure App Service with a custom domain, there are few options. I am going to list them here.&lt;/p&gt;&#xA;&lt;h2 id=&#34;free-certificate&#34;&gt;Free certificate:&lt;/h2&gt;&#xA;&lt;p&gt;Azure provides a free SSL certificate, and it is fully managed by Azure.  Azure renew the process for you, and take care of everything for you.&lt;br&gt;&#xA;Although having a free certificate is a wonderful idea, but it has some shortcoming:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Everything you need to know about configure DNS to provide domain for your blog</title>
      <link>http://localhost:1313/post/2023_12_3_dns_settings_to_map_blog/</link>
      <pubDate>Sun, 03 Dec 2023 12:41:54 -0600</pubDate>
      <guid>http://localhost:1313/post/2023_12_3_dns_settings_to_map_blog/</guid>
      <description>&lt;p&gt;You host your blog on Github pages, or Azure static website, or Azure blob storage with static website enabled.  But you need to use a custom domain.&lt;br&gt;&#xA;Every time I changed my content location, I go back to remember how to do it, so I decided to make a post about it.&lt;/p&gt;&#xA;&lt;h1 id=&#34;understand-how-custom-domain-mapping-works&#34;&gt;Understand how custom domain mapping works:&lt;/h1&gt;&#xA;&lt;p&gt;You host your static web pages on one of the static hosting services, for example these three:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Get the most out of Azure App Service.</title>
      <link>http://localhost:1313/post/2023_11_09_get_most_out_of_app_service/</link>
      <pubDate>Thu, 09 Nov 2023 12:41:54 -0600</pubDate>
      <guid>http://localhost:1313/post/2023_11_09_get_most_out_of_app_service/</guid>
      <description>&lt;p&gt;Azure App service take care of tons of infrastructure, hosting, scalability, monitoring, deployment, DevOps, security and environment of your shoulders.&lt;/p&gt;&#xA;&lt;p&gt;But the question, are you really utilizing the most out of this wonderful service?&lt;br&gt;&#xA;Azure App service has tons of features that make it easy to forget about some of them and missing using them.&lt;/p&gt;&#xA;&lt;p&gt;I am going to list this checklist and explain more details on them. There are features that &lt;strong&gt;Must&lt;/strong&gt; be implemented, and there are features that are optional because you might be using other services to achieve their functionalities.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build resilient applications accessing Azure services with no code.</title>
      <link>http://localhost:1313/post/2023_03_11_build_resilient_applications_azure/</link>
      <pubDate>Sat, 11 Mar 2023 18:44:55 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_03_11_build_resilient_applications_azure/</guid>
      <description>&lt;p&gt;When working on distributed system like systems that are running on the cloud, and microservices, then you should anticipate transient faults like temporary loss of network connection, or temporary unavailability of a service, or a service is busy.&lt;br&gt;&#xA;This is why in cloud application, the term &lt;strong&gt;Building for resiliency&lt;/strong&gt; become a pattern in building application, and it means properly handling these transient faults in the code.&lt;/p&gt;&#xA;&lt;p&gt;There are two common used patterns that we can use in our code, that can help build resilience application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Buy Custom Domain With Azure for your App Service.</title>
      <link>http://localhost:1313/post/2023_03_05_buy_custom_domain_with_azure/</link>
      <pubDate>Sat, 04 Mar 2023 21:44:55 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_03_05_buy_custom_domain_with_azure/</guid>
      <description>&lt;p&gt;If you googled how to buy a domain name on Azure, you might get answers saying that Azure doesn&amp;rsquo;t provide domain name registrar, like &lt;a href=&#34;https://learn.microsoft.com/en-us/answers/questions/10805/use-azure-as-a-domain-registrar-for-a-domain-curre?orderby=helpful&#34;&gt;the following answer&lt;/a&gt;, or &lt;a href=&#34;https://feedback.azure.com/d365community/idea/9e9f97ea-8526-ec11-b6e6-000d3a4f0789&#34;&gt;the following discussion&lt;/a&gt;.&lt;br&gt;&#xA;Not even those answers, even the book &lt;a href=&#34;https://www.microsoftpressstore.com/store/exam-ref-az-900-microsoft-azure-fundamentals-9780137955145&#34;&gt;Exam Ref AZ-900&lt;/a&gt; which is a Microsoft book says the following about &lt;code&gt;Azure DNS Zone&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;If you want to purchase your own domain name, you go to a domain registrar, and they register the domain to you. &amp;hellip;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Everything you need to know about telemetry for your Asp.NET application on Azure.</title>
      <link>http://localhost:1313/post/2023_02_24_application_insights_on_azure/</link>
      <pubDate>Fri, 24 Feb 2023 21:44:55 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_02_24_application_insights_on_azure/</guid>
      <description>&lt;p&gt;All of the services that Azure offers for the instrumentation and observability (monitoring) of applications are grouped under Azure Monitor.&lt;/p&gt;&#xA;&lt;p&gt;Three services fall under the banner of Azure Monitor:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Azure Monitor itself, which offers the observability component to track your apps.&lt;/li&gt;&#xA;&lt;li&gt;Application Insights, or its substitute OpenTelemetry, which offers the instrumentation and telemetry components&lt;/li&gt;&#xA;&lt;li&gt;The analytics component is provided by Log Analytics.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We will emphasise the instrumentation component in this post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Check performance bottleneck with Azure Application Insights.</title>
      <link>http://localhost:1313/post/2023_02_22_azure_application_insight_performance/</link>
      <pubDate>Wed, 22 Feb 2023 21:44:55 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_02_22_azure_application_insight_performance/</guid>
      <description>&lt;p&gt;If you have Application Insights enabled for your azure app service, then it is a piece of cake to get the performance bottleneck in your app, and even it check external dependencies like database queries or any other external dependencies.&lt;/p&gt;&#xA;&lt;p&gt;I have a Web API application, that is accessing Azure Sql Server, and Azure blob storage.&lt;/p&gt;&#xA;&lt;p&gt;By going into the performance blade under &lt;code&gt;Investigate&lt;/code&gt;:&lt;br&gt;&#xA;&#xA;  &lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mr3srn55zc4vebhm1ik.png&#34; alt=&#34;Image description&#34;&gt;&#xA;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;You will see the average time for each API call, sorted descending by time:&#xA;&#xA;  &lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir4wnbet13t5m4875maz.png&#34; alt=&#34;Image description&#34;&gt;&#xA;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Use Azure Key Vault to retrieve secured parameters during  Azure deployment.</title>
      <link>http://localhost:1313/post/2023_02_04_azure_keyvault_deployment/</link>
      <pubDate>Sat, 04 Feb 2023 20:42:03 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_02_04_azure_keyvault_deployment/</guid>
      <description>&lt;p&gt;You have an ARM template to deploy, and you need to pass secure parameters. Instead of storing secure values in the parameter file, you can just retrieve these values from Key Vault.&lt;/p&gt;&#xA;&lt;p&gt;To be able to access the key vault by the resource manager you need to change access policy to allow &amp;ldquo;Azure Resource Manager for template deployment&amp;rdquo;, as shown here.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e693x90rrx04ul7bpd5e.jpg&#34; alt=&#34;Image description&#34;&gt;&#xA;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Or you can do it from Powershell:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// to update an existing key vault&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Set-AzKeyVaultAccessPolicy&lt;/span&gt; -VaultName MyVaultName -EnabledForTemplateDeployment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// to create a new key vault with this feature enabled&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;New-AzKeyVault&lt;/span&gt; `&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -VaultName MyVaultName `&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -resourceGroupName myresourcegroup `&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -Location centralus `&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -EnabledForTemplateDeployment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-to-use-it&#34;&gt;How to use it?&lt;/h2&gt;&#xA;&lt;p&gt;in the deployment parameter file specify the location of the secured string to be the &lt;code&gt;keyvault&lt;/code&gt; as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parse Azure SAS token using regular expression</title>
      <link>http://localhost:1313/post/2023_02_03_parse_sas_token_regex/</link>
      <pubDate>Fri, 03 Feb 2023 20:40:37 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_02_03_parse_sas_token_regex/</guid>
      <description>&lt;p&gt;If you have an Azure SAS token that is not working, it is good idea to parse it and understand what permissions and values it contains.&lt;/p&gt;&#xA;&lt;p&gt;This is a JavaScript code that uses Regular Expression to parse he SAS token, and an running example where you can try your own SAS token.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; paramNames &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sig&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;cryptographic signature&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  st&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;start time&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  se&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;end time&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  spr&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;protocol&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  srt&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;resource types&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sv&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;version&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sp&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;permissions&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ss&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;services&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; valueLookups &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sp &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     r&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;read&amp;#39;&lt;/span&gt;, d&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;, w&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;write&amp;#39;&lt;/span&gt;, l&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt;, a&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;create&amp;#39;&lt;/span&gt;, u&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;update&amp;#39;&lt;/span&gt;, p&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;process&amp;#39;&lt;/span&gt;, f&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;filter&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  srt&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;service&amp;#39;&lt;/span&gt;, c&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;container&amp;#39;&lt;/span&gt;, o&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ss &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;blob&amp;#39;&lt;/span&gt;, f&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;, q&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;queue&amp;#39;&lt;/span&gt;, t&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; valueConvertor &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (key, inputValue) =&amp;gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      valueLookups[key] &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; [...inputValue].map(x =&amp;gt; valueLookups[key][x] &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; inputValue;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; parseData(sasToken) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; regExpressionPattern &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/[?&amp;amp;]([a-z]*)=([^\&amp;amp;]*)/g&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; parameters &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [...sasToken.matchAll(regExpressionPattern)];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; finalObject &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; parameters.reduce((acc, row) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {...acc, [paramNames[row[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; row[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]]&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; valueConvertor(row[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], row[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;])}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, {});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; outputObject &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ParseData(inputSasToken);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// The output object will be in the format&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2021-06-08&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;services&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;blob&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;queue&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;resource types&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;container&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;write&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;create&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;process&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;end time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2023-02-04T03:03:37Z&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;start time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2023-02-03T19:03:37Z&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cryptographic signature&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;..jhh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Try it for yourself:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing Kudu, the engine that handle all web application deployment to Azure App Service.</title>
      <link>http://localhost:1313/post/2023_02_01_introducing_kudu/</link>
      <pubDate>Wed, 01 Feb 2023 20:20:40 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_02_01_introducing_kudu/</guid>
      <description>&lt;p&gt;If you follow any tutorials on Azure App Service, you will find that they use one of five options to deploy a web application to the Azure.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Using Azure DevOps&lt;/li&gt;&#xA;&lt;li&gt;Using Github actions and webhooks.&lt;/li&gt;&#xA;&lt;li&gt;FTP&lt;/li&gt;&#xA;&lt;li&gt;Zip Deploy.&lt;/li&gt;&#xA;&lt;li&gt;MSDeploy (Microsoft Web Deploy tool).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;But behind the scenes, all these options are using the same back engine, which is &lt;a href=&#34;https://github.com/projectkudu/kudu&#34;&gt;Kudu&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;When we use FTP, Zip, or MSDeploy, we are actually calling Kudu REST API for deployment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Networking Recipes - Connect Azure Database and an Azure App Service using Virtual Network.</title>
      <link>http://localhost:1313/post/2023_01_10_azure_networking_reciep_one/</link>
      <pubDate>Tue, 10 Jan 2023 20:00:24 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_01_10_azure_networking_reciep_one/</guid>
      <description>&lt;p&gt;If your application is connecting to Azure database, or any other resources, then connecting them through Virtual Network (VNet) will enhance the performance (assuming the app service and the resources are in the same region), as well it enhance the security and we can lock the resources to have private endpoint, and not accessed publicly.&#xA;I am going to go through a walk-through tutorial, using Azure Sql Server as an example, but this can work with any database on Azure, or even any resources like blob storage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A developer introduction to cloud networking</title>
      <link>http://localhost:1313/post/2023_01_09_introduction_azure_networking/</link>
      <pubDate>Sun, 08 Jan 2023 20:07:36 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_01_09_introduction_azure_networking/</guid>
      <description>&lt;p&gt;As a developer who dealt with the cloud, either to create a virtual machine, or to deploy a website that connect to a database, then most probabely you had to deal even in short with a private network.&#xA;And most of us developers don&amp;rsquo;t know a lot about networking, because it is either the job of dev-ops or system administrator. But on the cloud you find that you have to take some decisions related to the networking.&#xA;This post is an introduction for developers who know very little about the cloud, and will cover enough information to help you understand how to take better decisions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SPA routing and how to handle it with Azure Static Web app.</title>
      <link>http://localhost:1313/post/2023_01_08_azure_static_webapp_routing/</link>
      <pubDate>Sun, 08 Jan 2023 19:58:31 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_01_08_azure_static_webapp_routing/</guid>
      <description>&lt;p&gt;If you built a SPA application using one of the modern SPA frameworks like React, Vue, Angular&amp;hellip;, then you must be using their router to define your client side routing.&lt;br&gt;&#xA;But you need to make a small adjustment on the server that serve your static application in order to deal with client routing gracefully, and this small adjustment is to tell the server to have a fall back on any route that is not recognized by the server to the root of the application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploy A Single Page Application to Azure Static Webapp using TeamCity, Jenkins or any CI, or command line</title>
      <link>http://localhost:1313/post/2023_01_03_azure_static_webapp_deployment/</link>
      <pubDate>Tue, 03 Jan 2023 19:56:30 -0700</pubDate>
      <guid>http://localhost:1313/post/2023_01_03_azure_static_webapp_deployment/</guid>
      <description>&lt;p&gt;I was trying to setup a deployment for an SPA application to an Azure Static Web app using TeamCity, but most of the tutorials I found was doing the deployment through CI/CD of Github&amp;rsquo;s Actions by monitoring a specific branch of a Github repository and deploy automatically whenever we check in into that branch, or the other alternative is using Azure DevOps pipeline.&#xA;But what if we don&amp;rsquo;t want to use neither, and instead we need to do it on demand from TeamCity, or any other CI/CD tool?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prepare .NET core Microservice to be monitored by Kubernetes</title>
      <link>http://localhost:1313/post/2022-12-28_prepare_aspnet_api_monitored_by_k8s/</link>
      <pubDate>Tue, 27 Dec 2022 19:47:05 -0700</pubDate>
      <guid>http://localhost:1313/post/2022-12-28_prepare_aspnet_api_monitored_by_k8s/</guid>
      <description>&lt;h2 id=&#34;kubernetes-monitoring&#34;&gt;Kubernetes Monitoring:&lt;/h2&gt;&#xA;&lt;p&gt;Kubernetes monitors the deployed microservices and check if any failure or a deadlock that makes the service not responding in order to restart the hosting container.&lt;br&gt;&#xA;Kubernetes achieve this by calling three different probes that determine the status of the container/pod. The three probes are:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;liveness&lt;/strong&gt;: which monitor any deadlock, or the service is down, and Kubernetes will remove the dead container and restart another one.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;startup&lt;/strong&gt;: Your service might need time at startup to wait for all its dependencies to be ready. Your service will implement this probe to tell Kubernetes that your service is ready or not to receive calls.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;readiness&lt;/strong&gt;: Will tell if your service is ready or not. it is different from liveness that Kubernetes won&amp;rsquo;t restart a new container, but just remove it from the load balancer.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We create on our microservices three end points that correspond to the three Kubernetes probes, and define it in the deployment config file.&lt;br&gt;&#xA;As an example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to fix common error using Azure Kubernetes AKS from WSL2</title>
      <link>http://localhost:1313/post/2022_12_27_fix_common_error_kubernets_wsl2/</link>
      <pubDate>Tue, 27 Dec 2022 19:43:59 -0700</pubDate>
      <guid>http://localhost:1313/post/2022_12_27_fix_common_error_kubernets_wsl2/</guid>
      <description>&lt;p&gt;When you use Kubernetes CLI tool: &lt;code&gt;kubectl&lt;/code&gt; that is installed while you installed Docker Desktop for Windows, there is a small glitch that it will fail the &lt;code&gt;kubectl&lt;/code&gt; commands, because of Kubeconfig file.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s supposed you want to create a new cluster on AKS, as follows:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az aks create --resource-group MyResourceGropu --name MyMicroserviceCluster --node-count &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; --enable-addons http_application_routing --generate-ssh-keys&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then you need to set that new cluster as your default cluster to work on, so you use&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
